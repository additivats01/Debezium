# quarkus.h2.console.path=/h2
# quarkus.datasource.db-kind=h2
# quarkus.datasource.jdbc.url=jdbc:h2:mem:db
# quarkus.datasource.db-kind = postgresql
# # quarkus.datasource.db-kind=postgresql
# quarkus.datasource.username = pguser
# quarkus.datasource.password = password
quarkus.log.syslog.enable=true
quarkus.log.syslog.app-name=nsp_db_fresh
quarkus.log.syslog.format=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c] (%t) %m%e%n
quarkus.log.syslog.json.print-details=true

quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/nsp_fresh
quarkus.datasource.jdbc.new-connection-sql=set search_path to nspprod;
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=Password54321
quarkus.http.port=9090
# quarkus.hibernate-orm.database.generation=drop-and-create
# quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect
# quarkus.hibernate-orm.sql-load-script=import.sql
quarkus.devservices.enabled=false

quarkus.rest-client.elasticurl.url=http://localhost:9200
host.port.elastic = localhost:9200
# host.port.elastic=localhost:9200
kafka.topic.name0=NSP.fresh.payment.process_beneficary
kafka.topic.name1=NSP.fresh.payment.process_payments
kafka.topic.name2=NSP.renewal.payment.process_beneficary
kafka.topic.name3=NSP.renewal.payment.process_payments
kafka.topic.name4=NSP.fresh.nspprod.data_applicant_registration_details
kafka.topic.name5=NSP.fresh.payment.in_merit_applicants


#kafka.topic.name4=NSP.fresh.nspprod.data_applicant_qualifications
#kafka.topic.name5=NSP.renewal.nspprod.data_applicant_registration_details
#kafka.topic.name6=NSP.renewal.nspprod.data_applicant_applied_schemes
#kafka.topic.name7=NSP.renewal.nspprod.data_applicant_registration_warb
#kafka.topic.name8=NSP.renewal.nspprod.data_applicant_agency_verifications
#kafka.topic.name9=NSP.renewal.nspprod.data_applicant_qualifications

quarkus.log.file.enable=true
quarkus.log.file.path=application.log
quarkus.log.file.format=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c] (%t) %s%e%n

camel.activeMq.broker-url=tcp://localhost:8161
camel.activeMq.pool.enabled=true



%test.quarkus.h2.console.path=/h2
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:db
%test.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect
%test.quarkus.hibernate-orm.sql-load-script=import.sql
%test.host.port.elastic = localhost:6733
%test.quarkus.hibernate-orm.log.sql=true



# Kafka brokers in native test
camel.component.kafka.brokers=localhost:9092

# How often should the messages be generated and pushed to Kafka Topic
timer.period = 10000
timer.delay = 10000


# query2 = select application_id, sch.scheme_id, total_verif_level, current_verif_level, current_verif_status, verif_remarks, form_corrrection_level, is_form_processed, is_selected, merit_rank, sch.scheme_name, min.ministry_id, ministry_short_name,ministry_name,parent_ministry,delete_flag,display_order,lock,is_ministry_link_created, is_active,state_central, scheme_type, from mst_schemes as sch inner join data_applicant_applied_schemes as daas on daas.scheme_id = sch.scheme_id inner join mst_ministries as min on min.ministry_id = sch.ministry_id where application_id='@{application_id}';
# query5 = select * from data_applicant_agency_verifications where application_id='@{application_id}';
# query3 = select daw.*,  ftype.force_type_desc, wcat.category_name, mrank.rank_desc, railrank.rank_name, railzone.zone_id from data_applicant_registration_warb as daw left join mst_force_type as ftype on ftype.force_type = daw.force_type_id left join mst_warb_category as wcat on wcat.category_id = daw.category_id left join mst_rank as mrank on mrank.force_type = daw.force_type_id left join mst_railway_rank as railrank on railrank.rank_id = daw.railway_rank left join mst_railway_zone as railzone on railzone.zone_id = daw.zone where application_id='@{application_id}';
# query1 = select application_id, fresh_renewal, domicile_state_id, applicant_name, aadhaar_no, gender, date_of_birth, dar.category_id, is_minority, disability_flag, dar.disablity_type, disability_percentage, orphan_flag, hosteller, annual_family_income, marital_status, parent_occupation, father_name, mother_name, gaurdian_name, bank_id, branch_ifsc_code, bank_account_no, pfms_code, permanent_state_id, permanent_district_id, permanent_mandal_id, permanent_village_id, permanent_address, permanent_pincode, email_id, mobile_no, registered_date, dar.application_level, updated_by, updated_on, created_by, created_on, religion, account_holder_type, admission_fee, tution_fee, class_start_date, hash_dob, pre_post_matric, inst_verify_by, inst_verify_date, inst_verify, modeofstudy, ip_address, dar.application_status, misc_fee, dist_verify_by, dist_verify_date, dist_verify, state_verify_by, state_verify_date, state_verify, dist_document_verify, inst_document_verify, min_verify_by, min_verify, min_verify_date, delete_record, deleted_by, delete_on, delete_ip_address, deleted_by_level, agency_id, agency_name, rank, outofquota, is_selected, lot_number, is_approved_for_payment, approved_by, approved_by_ip, lot_number_history, sanity, entitled_fee_amount, entitled_lumpsump_amount, scheme, payment_stoped, payment_sent, bank_name, r_pfms_payment_status, benif_status, benif_error_code, benif_rej_reason_code, benif_rej_reson_desc, pay_method, pay_amt_centre_shr, pay_amt_state_shr, payment_transaction_id, in_rank, payment_status, payment_error_code, pfms_ben_code, payment_rej_reason_code, payment_rej_reason_desc, automate_benificiary, automate_payment, is_fee_calculated, payment_batch_id, is_singlegirlchild, is_university_rankholder, enc_aadhaar, aadhaar_virtual_id, aadhaar_registration_mode, aadhaar_token_no, is_xml_generated_for_payment, is_payment_file_pushed, is_response_recieved, scholarship_incentive, supplementary, red_flag, ration_card_no, ration_card_member_no, name_as_in_ration_card, aadhaar_vault_ref_token, admission_no, admission_year, elastic_time, parents_not_alive, pfms_state_code,state_name,short_name,state_ut, disability_desc, district_name, dist.district_id, religion_name, marital_status_name, gender_name, apst.description, regcat.category_name, course_type, occup_name from data_applicant_registration_details as dar left join mst_states as st on st.state_id = dar.domicile_state_id left join mst_districts as dist on dist.district_id = dar.permanent_district_id left join mst_disability_type as dis on dis.disability_type = dar.disablity_type left join mst_religion as rel on rel.religion_id = dar.religion left join mst_marital_status as mrtl on mrtl.marital_id = dar.marital_status left join mst_gender as gen on gen.gender_id = dar.gender left join mst_application_status as apst on apst.application_status = dar.application_status left join mst_scholarship_category as scat on scat.category_id = dar.pre_post_matric left join mst_course_type as ctyp on ctyp.course_type_id=dar.modeofstudy left join mst_parental_occupation as pocc on pocc.occup_id = dar.parent_occupation left join mst_category as regcat on regcat.category_id = dar.category_id where  application_id='@{application_id}';


# quarkus.datasource.db-kind = postgresql
# quarkus.datasource.db-kind=postgresql
# quarkus.datasource.username = pguser
# quarkus.datasource.password = password
# quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/dbdemo

# drop and create the database at startup (use `update` to only update the schema)
# quarkus.hibernate-orm.database.generation = drop-and-create

